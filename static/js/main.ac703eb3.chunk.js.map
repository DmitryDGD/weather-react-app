{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","sunrise","sunset","pressure","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","cod","setState","sunsetInSec","sys","date","Date","timeSunset","toLocaleTimeString","sunriseInSec","date1","timeSunrise","main","pressureInMmHg","Math","floor","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mPASeA,EAPF,kBACV,6BACC,6IACA,4LCMWC,EATF,SAAAC,GAAK,OAEd,0BAAMC,SAAYD,EAAME,eACxB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,uICcWC,EAlBC,SAAAN,GAAK,OAEnB,yBAAKO,UAAY,aACdP,EAAMQ,MACP,6BACC,oHAAoBR,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxC,kGAAiBT,EAAMU,KAAvB,UACA,yGAAmBV,EAAMW,SACzB,mGAAkBX,EAAMY,QACxB,gFAAcZ,EAAMa,SAApB,4CAID,uBAAGN,UAAY,SAAUP,EAAMc,SCV7BC,EAAU,mCA8GDC,E,4MA1GdC,MAAQ,CACPP,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,aAASO,EACTN,YAAQM,EACRL,cAAUK,EACVJ,WAAOI,G,EAIRC,e,uCAAiB,WAAOC,GAAP,mCAAAC,EAAA,yDAChBD,EAAEE,mBACEd,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFlB,iCAMMC,MAAM,qDAAD,OAAsDlB,EAAtD,kBAAoEO,EAApE,0BANX,cAMVY,EANU,gBAOGA,EAAQC,OAPX,UAUA,SAHVC,EAPU,QAURC,IAVQ,0CAYK,EAAKC,SAAS,CACnBrB,UAAMQ,EACJV,UAAMU,EACNT,aAASS,EACTP,aAASO,EACTN,YAAQM,EACRJ,MAAO,6LAlBT,QAwBNkB,EAAcH,EAAKI,IAAIrB,OACvBsB,EAAO,IAAIC,KAAmB,IAAdH,GAChBI,EAAaF,EAAKG,qBAElBC,EAAeT,EAAKI,IAAItB,QACxB4B,EAAQ,IAAIJ,KAAoB,IAAfG,GACjBE,EAAcD,EAAMF,qBAIpBxB,EAAWgB,EAAKY,KAAK5B,SACzB6B,EAAiBC,KAAKC,MAAiB,OAAX/B,GAGlC,EAAKkB,SAAS,CACbrB,KAAMmB,EAAKY,KAAK/B,KAChBF,KAAMqB,EAAKzB,KACXK,QAASoB,EAAKI,IAAIxB,QAClBE,QAAS6B,EACT5B,OAAQwB,EACRvB,SAAU6B,EACV5B,WAAOI,IA7CQ,wBAiDhB,EAAKa,SAAS,CACbrB,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,aAASO,EACTN,YAAQM,EACRL,cAAUK,EACVJ,MAAO,6SAxDQ,4C,6GA8DhB,OACC,yBAAKP,UAAY,WAChB,yBAAKA,UAAY,QAChB,yBAAKA,UAAY,aAChB,yBAAKA,UAAY,OACjB,yBAAKA,UAAY,iBAChB,kBAAC,EAAD,OAED,yBAAKA,UAAY,iBAChB,kBAAC,EAAD,CAAML,cAAkB2C,KAAK1B,iBAC7B,kBAAC,EAAD,CACCT,KAAMmC,KAAK5B,MAAMP,KACjBF,KAAMqC,KAAK5B,MAAMT,KACjBC,QAASoC,KAAK5B,MAAMR,QACpBE,QAASkC,KAAK5B,MAAMN,QACpBC,OAAQiC,KAAK5B,MAAML,OACnBC,SAAUgC,KAAK5B,MAAMJ,SACrBC,MAAO+B,KAAK5B,MAAMH,iB,GA5FRgC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLmD,QAAQnD,MAAMA,EAAMoD,a","file":"static/js/main.ac703eb3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = () => (\n\t\t\t<div>\n\t\t\t\t<h2>Погодное приложение</h2>\n\t\t\t\t<p>Узнайте погоду в вашем городе!</p>\n\t\t\t</div>\n\t\t\t);\n\nexport default Info;\n","import React from 'react';\n\nconst Form = props => (\n\t\t\t// форма для ввода города и кнопка \n\t\t\t\t<form onSubmit = {props.weatherMethod}>\n\t\t\t\t<input type=\"text\" name=\"city\" placeholder=\"Город\" />\n\t\t\t\t<button>Посмотреть погоду</button>\n\t</form>\n);\n\t\t\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n\t\t\t// форма вывода погоды\n\t\t<div className = \"infoWeath\"> \n\t\t\t{ props.city &&\n\t\t\t\t<div>\n\t\t\t\t\t<p>Местоположение: {props.city}, {props.country}</p>\n\t\t\t\t\t<p>Температура: {props.temp} &deg;C</p>\n\t\t\t\t\t<p>Восход солнца: {props.sunrise}</p>\n\t\t\t\t\t<p>Закат солнца: {props.sunset}</p>\n\t\t\t\t\t<p>Давление: {props.pressure} мм рт.ст</p>\n\t\t\t\t</div>\n\t\t\t }\n\n\t\t\t <p className = \"error\">{ props.error }</p>\n\t\t\t\n\t\t\t</div>\n\t\t\t);\n\nexport default Weather;\n","import React from 'react';\nimport Info from './components/info'\nimport Form from './components/form'\nimport Weather from './components/weather'\n\nconst API_KEY = \"de6116d74d724d27361340b36602b120\"\n\nclass App extends React.Component {\n\t\t\t\t// изначальные состояния\n\tstate = {\n\t\ttemp: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\tsunrise: undefined,\n\t\tsunset: undefined,\n\t\tpressure: undefined,\n\t\terror: undefined\n\t}\n\t\t\t\t//КОНЕЦ\n\n\tgettingWeather = async (e) => {\n\t\te.preventDefault();\n\t\tlet city = e.target.elements.city.value;\n\n\t\tif(city) { // проверка введён ли город\n\n\t\tconst api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric&lang=ru`);\n\t\tconst data = await api_url.json();\n\n\t\t\t//сообщение об ошибке если ввод нерелевантный\n\t\tif(data.cod === '404'){\n\n                return this.setState({\n\t                 temp: undefined,\n                    city: undefined,\n                    country: undefined,\n                    sunrise: undefined,\n                    sunset: undefined,\n                    error: \"Извините, мы не знаем такого города :(\"\n                });\n            }\n\n\n \t\t\t\t\t// конвертирования время восхода и заката      \n        let sunsetInSec = data.sys.sunset;\n        let date = new Date(sunsetInSec * 1000);\n        let timeSunset = date.toLocaleTimeString();\n\n        let sunriseInSec = data.sys.sunrise;\n        let date1 = new Date(sunriseInSec * 1000);\n        let timeSunrise = date1.toLocaleTimeString();\n        \t\t\t// КОНЕЦ\n\n        \t\t\t// конвертирование давления в мм рт.ст\n        let pressure = data.main.pressure;\n\t\t  let pressureInMmHg = Math.floor(pressure * 0.75006);\n\t\t  \t\t\t// КОНЕЦ\n\n\t\tthis.setState({\n\t\t\ttemp: data.main.temp,\n\t\t\tcity: data.name,\n\t\t\tcountry: data.sys.country,\n\t\t\tsunrise: timeSunrise,\n\t\t\tsunset: timeSunset,\n\t\t\tpressure: pressureInMmHg,\n\t\t\terror: undefined\n\t\t});\n\n\t} else {\n\t\tthis.setState({\n\t\t\ttemp: undefined,\n\t\t\tcity: undefined,\n\t\t\tcountry: undefined,\n\t\t\tsunrise: undefined,\n\t\t\tsunset: undefined,\n\t\t\tpressure: undefined,\n\t\t\terror: \"Пожалуйста, введите название города на английском языке.\"\n\t\t});\n\t}\n}\n\t\t\t\t\t// передача данных в форму вывода weather.js\n\trender() {\n\t\treturn ( \n\t\t\t<div className = \"wrapper\">\n\t\t\t\t<div className = \"main\">\n\t\t\t\t\t<div className = \"container\">\n\t\t\t\t\t\t<div className = \"row\">\n\t\t\t\t\t\t<div className = \"col-sm-5 info\">\n\t\t\t\t\t\t\t<Info/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className = \"col-sm-7 form\">\n\t\t\t\t\t\t\t<Form weatherMethod = { this.gettingWeather } /> \n\t\t\t\t\t\t\t<Weather \n\t\t\t\t\t\t\t\ttemp={this.state.temp}\n\t\t\t\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\t\t\t\tsunrise={this.state.sunrise}\n\t\t\t\t\t\t\t\tsunset={this.state.sunset}\n\t\t\t\t\t\t\t\tpressure={this.state.pressure}\n\t\t\t\t\t\t\t\terror={this.state.error}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t\t\n\t\t\n\t\t);\n\t}\n}\n\n\t\t\t\t/* без этой строчки будет ошибка!!! \n\t\t\t\t\tэкспорт App.js в index.js (потому что в index.js есть импорт (подключение) App.js */ \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}